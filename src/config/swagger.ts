// src/config/swagger.ts
import { Express, Request, Response } from "express";
import swaggerUi from "swagger-ui-express";

// Import the swagger.json file generated by TSOA
import swaggerJson from "@/generated/swagger.json";
import log from "@/util/logger.js";

// The imported JSON is a mutable object, so we can modify it.
const swaggerSpec = swaggerJson;

function swaggerDocs(app: Express, serverUrl: string): void {
  // Dynamically set the server URL in the Swagger spec
  // Use Object.assign to bypass TypeScript checking
  const serverObject = Object.assign(
    { url: serverUrl },
    { description: "Server" },
  );

  swaggerSpec.servers = [serverObject];

  // Spring Boot style paths
  app.use("/api/swagger-ui", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

  // Alternative shorter path (still supported)
  app.use("/swagger-ui", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

  // OpenAPI spec endpoints (Spring Boot style)
  app.get("/api/v3/api-docs", (req: Request, res: Response) => {
    res.setHeader("Content-Type", "application/json");
    res.send(swaggerSpec);
  });

  // Alternative spec endpoint
  app.get("/api-docs", (req: Request, res: Response) => {
    res.setHeader("Content-Type", "application/json");
    res.send(swaggerSpec);
  });

  // Root redirect to swagger-ui (like Spring Boot)
  app.get("/", (req: Request, res: Response) => {
    res.redirect("/api/swagger-ui/");
  });

  // Log available endpoints in Spring Boot style
  const baseUrl = serverUrl.replace("/api", "");
  log.info(`Swagger UI available at:`);
  log.info(`  - ${baseUrl}/api/swagger-ui/`);
  log.info(`  - ${baseUrl}/swagger-ui/`);
  log.info(`OpenAPI spec available at:`);
  log.info(`  - ${baseUrl}/api/v3/api-docs`);
  log.info(`  - ${baseUrl}/api-docs`);
}

export default swaggerDocs;
